{
    "q000": "Which is the next div-iteration of mergesort?",
    "0001": "[2],[J],[A],[5],[Q],[2],[3],[8]",
    "0002": "[2,J],[5,Q],[A],[2,3,8]",
    "0003": "[2,A],[J,5],[Q,3],[2,8]",
    "0004": "[2,5,A,J],[2,3,8,Q]",
    "0005": "[2,J,5,A],[Q,2,3,8]",
    "0006": "[2,J],[A],[5],[Q,2],[3],[8]",
    "0007": "[J,A,5],[Q,2,2,3,8]",
    "0008": "[2,2,3,5],[8,A,J,Q]",
    "0009": "[2,3,2,5],[8,A,J,Q]",
    "1111": "[2,J,A,5],[Q,2,3,8]",
    
    "q001": "Which is the third div-iteration of mergesort?",
    "0010": "[2],[J],[A],[5],[Q],[2],[3],[8]",
    "0011": "[2,J],[5,Q],[A],[2,3,8]",
    "0012": "[2,A],[J,5],[Q,3],[2,8]",
    "0013": "[2,5,A,J],[2,3,8,Q]",
    "0014": "[2,J,5,A],[Q,2,3,8]",
    "0015": "[2,J],[A],[5],[Q,2],[3],[8]",
    "0016": "[J,A,5],[Q,2,2,3,8]",
    "0017": "[2,2,3,5],[8,A,J,Q]",
    "0018": "[2,3,2,5],[8,A,J,Q]",
    "1110": "[2],[J],[A,5],[Q,2,3,8]",
    
    "q002": "Assume that in divide you look right first, which is the 5th div-iteration",
    "0019": "[2],[J],[A],[5],[Q],[2],[3],[8]",
    "0020": "[2,J],[5,Q],[A],[2,3,8]",
    "0021": "[2,A],[J,5],[Q,3],[2,8]",
    "0022": "[2,5,A,J],[2,3,8,Q]",
    "0023": "[2,J,5,A],[Q,2,3,8]",
    "0024": "[2,J],[A],[5],[Q,2],[3],[8]",
    "0025": "[J,A,5],[Q,2,2,3,8]",
    "0026": "[2,2,3,5],[8,A,J,Q]",
    "0027": "[2,3,2,5],[8,A,J,Q]",
    "1101": "[2,J],[A],[5],[Q],[2],[3],[8]",
    
    "q003": "Using the previous definition, is mergesort stable?",
    "0028": "No",
    "1011": "Yes",
    
    "q200": "Given the following relationships :Red > Yellow AND Blue > Red, Pink < Orange AND Orange < Green, Pink > Blue. What is the order of the cards?",
    "0029": "Y,B,R,P,O,G",
    "0030": "Y,R,B,O,P,G",
    "0031": "R,Y,B,P,G,O",
    "0032": "Y,Y,R,B,P,O",
    "0033": "P,O,G,R,Y,B",
    "0034": "R,P,Y,O,B,G",
    "0035": "R,R,Y,R,B,B",
    "0036": "Y,R,B,P,G,O",
    "0037": "Y,B,R,P,G,O",
    "0038": "O,G,P,R,B,Y",
    "0039": "O,G,R,P,Y,B",
    "2111": "Y,R,B,P,O,G",
    
    "q201": "Given the following relationships :Red < Yellow AND Blue < Yellow, Pink > Orange AND Pink < Green, Orange > Red AND Green > Blue. What is the order of the cards?",
    "2110": "R,O,P,G,B,Y",
    
    "q202": "Given the following relationships :Red > Pink AND Orange < Green, Yellow < Green AND Pink > Yellow, Orange > Pink AND Red > Green AND Blue < Yellow. What is the order of the cards?",
    "2101": "B,Y,P,O,G,R",
    
    "q203": "Given the list [3,1,4,2] which are the comparations (in order) executed by the MergeSort algorithm?",
    "0040": "3>1, 3>2, 1>2, 4>2, 3>4",
    "0041": "4>2, 3>1, 1>2, 3>2, 3>4",
    "0042": "3>1, 4>2, 1>2, 2>3, 1>4",
    "0043": "1>3, 1>1, 1>2, 3>2, 3>4",
    "0044": "1>2, 2>1, 4>2, 3>2, 2>4",
    "0045": "3>4, 4>2, 1>2, 3>2, 3>1",
    "0046": "3>1, 1>2, 4>2, 3>2, 3>4",
    "0047": "3>1, 2>2, 1>2, 3>2, 3>4",
    "0048": "3>1, 4>2, 2>2, 3>2, 3>4",
    "0049": "3>1, 4>2, 1>1, 3>2, 3>4",
    "0050": "3>4, 4>2, 1>2, 3>2, 3>4",
    "2011": "3>1, 4>2, 1>2, 3>2, 3>4",
    
    "q300": "At the second div-iteration what is the content of the stack? (Answer structure: [top stack ... bottom stack])",
    "0051": "[mergeSort {elephant,tiger,rat}, merge, mergeSort {shark,cat}]",
    "0052": "[mergeSort {dog,cat}, merge, mergeSort {elephant,tiger,rat}]",
    "0053": "[merge, mergeSort {dog,cat}, merge, mergeSort {elephant,tiger,rat}, merge]",
    "0054": "[mergeSort {dog,cat}, merge, mergeSort {elephant,tiger}, merge]",
    "0055": "[mergeSort {dog,cat,elephant}, merge, mergeSort {elephant,tiger,rat}, merge]",
    "0056": "[mergeSort {dog,cat,elephant}, merge, mergeSort {tiger,rat}, merge]",
    "0057": "[mergeSort {dog,cat}, merge, merge, mergeSort {elephant,tiger,rat}, merge]",
    "0058": "[mergeSort {dog}, merge, mergeSort {cat}, merge, mergeSort {elephant,tiger,rat}, merge]",
    "0059": "[mergeSort {dog}, mergeSort {cat}, mergeSort {elephant,tiger,rat}, merge, merge]",
    "0060": "[mergeSort {dog}, mergeSort {cat}, mergeSort {elephant,tiger,rat}, merge, merge, merge]",
    "0061": "[mergeSort {dog}, mergeSort {cat}, mergeSort {elephant}, mergeSort{tiger,rat}]",
    "3111": "[mergeSort {dog,cat}, merge, mergeSort {elephant,tiger,rat}, merge]",
    
    "q301": "What is the content of the stack after fourth div-iteration? (Answer structure: [top stack ... bottom stack])",
    "3110": "[mergeSort {tiger,rat}, merge]",
    
    "q302": "Assume that in the calculations of the midpoint of the list all rounding was done to the upper limit. What would the content of the stack be after second div-iteration? (Answer structure: [top stack ... bottom stack])",
    "3101": "[mergeSort {cat}, merge, mergeSort {elephant,tiger,rat}, merge]",
    
    "q303": "Which part of the mergeSort algorithm assures its stability?",
    "0062": "The divide left part",
    "0063": "The divide right part",
    "0064": "The return when list is unitary",
    "0065": "All of it",
    "3011": "The merge part",
    
    "q400": "Assume the merge step receive the two list shown in the description, been them left and right respectively: how many times the while loop is entered?",
    "0066": "1",
    "0067": "5",
    "0068": "3",
    "0069": "4",
    "0070": "7",
    "0071": "6",
    "0072": "9",
    "0073": "2",
    "0074": "0",
    "4111": "8",
    
    "q401": "How many elements from the left list are compared with that of the right list?",
    "0075": "1",
    "0076": "5",
    "0077": "3",
    "0078": "2",
    "0079": "7",
    "0080": "8",
    "0081": "9",
    "0082": "6",
    "0083": "0",
    "4110": "4",
    
    "q402": "If the list were switched, how many elements of the left list would be compared with that of the right list?",
    "0084": "1",
    "0085": "5",
    "0086": "2",
    "0087": "4",
    "0088": "7",
    "0089": "8",
    "0090": "9",
    "0091": "3",
    "0092": "0",
    "4101": "6",
    
    "q403": "Pepe, your classmate, says both extend statements update the resulting list, what would you tell Pepe?",
    "0093": "Yes, but under a specific condition",
    "0094": "Yes, in every scenario",
    "0095": "I do not know",
    "0096": "3",
    "4011": "He should consider another career",

    "q500": "Certainly one of the extend statements afect the resulting list, with the above lists, which are the elements appended to the resulting list after the while loop ends?",
    "0097": "",
    "0098": "1,2,2,3",
    "0099": "1,1,1",
    "0100": "4",
    "0101": "1,2,3,5,J,Q",
    "0102": "Q",
    "0103": "3,5,J,Q",
    "0104": "J,Q",
    "0105": "2,2,3",
    "5111": "5,J,Q",
    
    "q501": "How many elements are appended to the result list after while execution?",
    "0106": "1",
    "0107": "5",
    "0108": "2",
    "0109": "4",
    "0110": "7",
    "0111": "8",
    "0112": "9",
    "0113": "6",
    "0114": "0",
    "5110": "3",
    
    "q502": "Imagine two arbitrary lists l1,l2 of size m and n, which of the following procedures allow the calculation of the correct number of elements appended to the result list?",
    "0115": "lm=l2; If max(l1)>max(l2) then lm=l1; number= size(lm)-t where t is the # of e in lm > than max(l)",
    "0116": "number= 42",
    "0117": "number= 8",
    "0118": "number= max(l1)-max(l2)",
    "0119": "number= max(l1,l2)",
    "0120": "number= max(l)",
    "0121": "number= max(l1)",
    "0122": "lm=l2; If max(l1)>max(l2) then lm=l1; number= size(lm)",
    "0123": "lm=l2;l=l1; If max(l1)>max(l2) then lm=l1,l=l2; number= size(lm)-t where t is the # of e in lm <= than max(l)",
    "5101": "lm=l2;l=l1; If max(l1)>max(l2) then lm=l1,l=l2; number= size(lm)-t where t is the # of e in lm < than max(l)",
    
    "q503": "Pepe, your classmate, has not switched careers. He says both lists that enter the merge routine have to be preordered, what do you tell Pepe?",
    "0124": "He should consider another career",
    "0125": "Only one list has to be",
    "0126": "I do not know",
    "0127": "Tomorrow",
    "5011": "Yes. You surprise me Pepe",
    
    
    "0000": "None of these"
}
